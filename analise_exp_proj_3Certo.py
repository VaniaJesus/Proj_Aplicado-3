# -*- coding: utf-8 -*-
"""Analise Exp Proj 3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eFBaNrXAWSxGe0fuDB6JvzHN50awccDx
"""

import pandas as pd

compras= pd.read_csv('/content/compras_supermercado_correto2.csv')
compras

# Consolidando itens comprados em uma lista e padronizando

compras['Itens Comprados'] = compras.apply(
    lambda row: [row[col].lower().strip() for col in compras.columns if 'item' in col and row[col].strip() != ''], axis=1)

# Remover as colunas individuais de itens

colunas_para_remover = [col for col in compras.columns if 'item' in col]
compras.drop(columns=colunas_para_remover, inplace=True)

pip install ydata-profiling

from pandas_profiling import ProfileReport



# Visualizando essa base
display(compras)

import matplotlib.pyplot as plt
import ydata_profiling

pip install --upgrade Pillow

# Certificando que todos os itens na coluna 'Ingredientes' são tratados como strings

compras['Itens Comprados'] = compras['Itens Comprados'].astype(str)

profile = ProfileReport(compras)
profile.to_file("meu_relatorioCompras.html")

profile

import matplotlib.pyplot as plt
import seaborn as sns
from scipy.stats import norm

valores = compras['valor_total_da_compra']

# Plotar o histograma

plt.figure(figsize=(10, 6))
sns.histplot(valores, kde=False, bins=30, stat="density", color='blue', label='Histograma')

# Calcular média e desvio padrão
media, desvio_padrao = norm.fit(valores)

# Adicionar a curva de distribuição gaussiana
xmin, xmax = plt.xlim()
x = np.linspace(xmin, xmax, 100)
p = norm.pdf(x, media, desvio_padrao)
plt.plot(x, p, 'k', linewidth=2, color='red', label='Curva Gaussiana')

title = "Distribuição valor da compra"
plt.title(title)
plt.xlabel('Valor Total da Compra')
plt.ylabel('Densidade')
plt.legend()

plt.show()

receitas= pd.read_excel('/content/Receitas.TudoGostoso.xlsx')
receitas

profile1 = ProfileReport(receitas)
profile1.to_file("meu_relatorioReceitas.html")

profile1

from collections import Counter
import matplotlib.pyplot as plt


# Função para contar palavras e retornar as mais comuns

def contar_palavras(coluna, n_top=10):
    todas_palavras = ' '.join(coluna).split()
    contagem_palavras = Counter(todas_palavras)
    total_palavras = sum(contagem_palavras.values())
    mais_comuns = contagem_palavras.most_common(n_top)
    # Calcular o percentual para as mais comuns
    mais_comuns_percentual = [(palavra, freq, freq / total_palavras * 100) for palavra, freq in mais_comuns]
    return mais_comuns_percentual

# Contar palavras

top_nomes = contar_palavras(receitas['Nome da Receita'])
top_ingredientes = contar_palavras(receitas['Ingredientes'])

# Converter as listas de tuplas mais comuns em DataFrame para facilitar a plotagem

df_top_nomes = pd.DataFrame(top_nomes, columns=['Palavra', 'Frequência', 'Percentual'])
df_top_ingredientes = pd.DataFrame(top_ingredientes, columns=['Palavra', 'Frequência', 'Percentual'])

# Gráficos de barras
plt.figure(figsize=(20, 6))

# Nomes das receitas

plt.subplot(1, 2, 1)
bars = plt.bar(df_top_nomes['Palavra'], df_top_nomes['Frequência'], color='blue')
plt.title('Top Palavras em Nomes de Receitas')
plt.xticks(rotation=45)
plt.ylabel('Frequência')

# Adicionar percentuais no topo das barras
for bar in bars:
    height = bar.get_height()
    plt.text(bar.get_x() + bar.get_width() / 2.0, height, f'{df_top_nomes["Percentual"][bars.index(bar)]:.2f}%', ha='center', va='bottom')

# Ingredientes
plt.subplot(1, 2, 2)
bars = plt.bar(df_top_ingredientes['Palavra'], df_top_ingredientes['Frequência'], color='red')
plt.title('Top Palavras em Ingredientes')
plt.xticks(rotation=45)
plt.ylabel('Frequência')

# Adicionar percentuais no topo das barras
for bar in bars:
    height = bar.get_height()
    plt.text(bar.get_x() + bar.get_width() / 2.0, height, f'{df_top_ingredientes["Percentual"][bars.index(bar)]:.2f}%', ha='center', va='bottom')

plt.tight_layout()
plt.show()







